/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/university.glb -o ./src/models/University.tsx -t --shadows 
*/

import * as THREE from 'three'
import { JSX } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('models/map.glb');

	const [
		ainsworthTexture,
		gardenTexture,
		redcenterTexture,
		scientiaTexture,
		terrainTexture
	] = useTexture([
		'./textures/uni-ainsworth.jpg',
		'./textures/uni-garden.jpg',
		'./textures/uni-redcenter.jpg',
		'./textures/uni-scientia.jpg',
		'./textures/uni-terrain.jpg'
	])
	ainsworthTexture.flipY = false;
	gardenTexture.flipY = false;
	redcenterTexture.flipY = false;
	scientiaTexture.flipY = false;
	terrainTexture.flipY = false;
	
	return (
			<group rotation={[0, Math.PI / 2, 0]}>
				<mesh geometry={ nodes.ainsworth.geometry }  position={ nodes.ainsworth.position} rotation={ nodes.ainsworth.rotation}>
						<meshBasicMaterial map={ ainsworthTexture } />
				</mesh>
				<mesh geometry={ nodes.redcenter.geometry } position={ nodes.redcenter.position} rotation={ nodes.redcenter.rotation}>
						<meshBasicMaterial map={ redcenterTexture } />
				</mesh>
				<mesh geometry={ nodes.scientia.geometry } position={ nodes.scientia.position} rotation={ nodes.scientia.rotation}>
						<meshBasicMaterial map={ scientiaTexture }/>
				</mesh>
				<mesh geometry={ nodes.garden.geometry } position={ nodes.garden.position} rotation={ nodes.garden.rotation}>
						<meshBasicMaterial map={ gardenTexture } />
				</mesh>
				<mesh geometry={ nodes.terrain.geometry } position={ nodes.terrain.position} rotation={ nodes.terrain.rotation}>
						<meshBasicMaterial map={ terrainTexture } />
				</mesh>
			</group>
	)
    const foundGrassMeshes: THREE.Mesh[] = []

    scene.traverse((child) => {
      if (child instanceof THREE.Mesh && child.name.startsWith('ainsworth')) {
				console.log(child)
				ainsworthTexture.flipY = false
				ainsworthTexture.colorSpace = THREE.SRGBColorSpace
				const meshBasicMaterial = new THREE.MeshBasicMaterial({
					map: ainsworthTexture
				})
				child.material = meshBasicMaterial;
      }
			// if (!terrainTexture) return;
			// if (child instanceof THREE.Mesh && child.name.startsWith('terrain')) {
			// 	terrainTexture.flipY = false
			// 	terrainTexture.colorSpace = THREE.SRGBColorSpace
			// 	const meshBasicMaterial = new THREE.MeshBasicMaterial({
			// 		map: terrainTexture
			// 	})
			// 	child.material = meshBasicMaterial;
			// 	child.material.needsUpdate = true
      // }
			// if (child instanceof THREE.Mesh && child.name.startsWith('redcenter')) {
			// 	redcenterTexture.flipY = false
			// 	redcenterTexture.colorSpace = THREE.SRGBColorSpace
			// 	const meshBasicMaterial = new THREE.MeshBasicMaterial({
			// 		map: redcenterTexture
			// 	})
			// 	child.material = meshBasicMaterial;
      // }
			// if (child instanceof THREE.Mesh && child.name.startsWith('garden')) {
			// 	gardenTexture.flipY = false
			// 	gardenTexture.colorSpace = THREE.SRGBColorSpace
			// 	const meshBasicMaterial = new THREE.MeshBasicMaterial({
			// 		map: gardenTexture
			// 	})
			// 	child.material = meshBasicMaterial;
      // }
			// if (child instanceof THREE.Mesh && child.name.startsWith('scientia')) {
			// 	scientiaTexture.flipY = false
			// 	scientiaTexture.colorSpace = THREE.SRGBColorSpace
			// 	const meshBasicMaterial = new THREE.MeshBasicMaterial({
			// 		map: scientiaTexture
			// 	})
			// 	child.material = meshBasicMaterial;

    setGrassMeshes(foundGrassMeshes)
  }, [scene, terrainTexture])

	return (
		<group>
			<primitive
				{...props}
				ref={map}
				object={ scene }
			/>
			{grassMeshes.map((mesh) => (
        <GrassMesh key={mesh.uuid} surfaceMesh={mesh} />
      ))}
		</group>
	)
}

useGLTF.preload('models/map.glb')
